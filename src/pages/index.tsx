import { Generations } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import Gradient from "../components/Gradient";

const Home: NextPage = () => {
	const [mood, setMood] = useState("");
	const [loading, setLoading] = useState(false);
	const [css, setCss] = useState(
		"linear-gradient(to right, #A149D2, #9553C2, #8B4EB2, #814AA3)"
	);
	const [focused, setFocused] = useState(false);
	const [generations, setGenerations] = useState<Generations[]>([]);
	const [update, setUpdate] = useState(0);
	const [quota, setQuota] = useState(0);

	useEffect(() => {
		(async () => {
			const fetched = await fetch("/api/getStuff");
			const { data } = (await fetched.json()) as { data: Generations[] };

			setGenerations(data);

			setLoading(false);
		})().catch((e) => console.log(e));
	}, [update]);

	useEffect(() => {
		(async () => {
			const fetched = await fetch("/api/quota");
			const { quota } = (await fetched.json()) as { quota: number };

			setQuota(quota);
		})().catch((e) => console.log(e));
	}, [update]);

	return (
		<>
			<Head>
				<title>GradienMood - Generate a gradient from a mood</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="min-h-screen bg-gradient-to-tr from-black to-gray-900 pt-20">
				<div className="flex min-h-[calc(100vh-4rem)] flex-col items-center">
					<div
						className={
							(focused ? "pointer-events-none -mt-48 opacity-75" : "") +
							" transition-all"
						}
					>
						<div
							className="my-2 text-center flex justify-center"
							dangerouslySetInnerHTML={{
								__html: `<a href="https://www.producthunt.com/posts/gradienmood?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-gradienmood" target="_blank"><img src="https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=375020&theme=dark&__=${Math.random()}" alt="GradienMood - Generate&#0032;gradients&#0032;with&#0032;your&#0032;mood&#0032; | Product Hunt" style="width: 250px; height: 54px;" width="250" height="54" /></a>`,
							}}
						></div>
						<h1
							className="text-6xl font-bold text-transparent"
							style={{
								background:
									"linear-gradient(90deg, #191B2C 0%, #B14FE9 50%, #FA9CFE 100%)",
								backgroundSize: "200% 100%",
								backgroundPosition: "right bottom",
								WebkitBackgroundClip: "text",
								WebkitTextFillColor: "transparent",
							}}
						>
							GradienMood
						</h1>

						<div className="my-4 rounded border border-slate-800 bg-slate-900 px-4 py-2 text-sm text-white">
							<span className="text-gray-500">PROMPT:</span> Calm looking
							gradient that is purplish color
						</div>

						<div className="p-10"></div>
					</div>

					<p className="mt-2 text-center text-gray-400">
						Generate a gradient from a mood /{" "}
						<span className="bg-black text-gray-300">
							Global Quota: {1000 - quota} left
						</span>
					</p>

					<input
						className="mt-8 w-[60vw] rounded border-none bg-slate-900 px-6 py-4 text-lg text-white outline-none transition-all  focus:bg-slate-800"
						placeholder="Enter a mood & press enter"
						value={mood}
						onChange={(e) => {
							setMood(e.target.value);
							e.target.value.length > 0 ? setFocused(true) : setFocused(false);
						}}
						onFocus={(e) => {
							e.target.value.length > 0 ? setFocused(true) : setFocused(false);
						}}
						onBlur={() => setFocused(false)}
						onKeyPress={(e) => {
							if (loading) return;

							if (e.key === "Enter") {
								setLoading(true);

								fetch("/api/generate?query=" + mood)
									.then((res) => res.json())
									.then((data: { error?: string; code: string }) => {
										if (data.error) {
											alert(data.error);
											setLoading(false);
											return;
										}

										setCss(data.code);
										setTimeout(() => {
											setLoading(false);
										}, 5000);
										setUpdate(update + 1);
									})
									.catch((e) => alert(e));
							}
						}}
					/>

					<div
						className={
							(loading ? "pointer-events-none opacity-75" : "") +
							" transition-all"
						}
					>
						<Gradient prompt={mood} code={css} />
					</div>

					<p className="my-4 max-w-[400px] rounded bg-slate-900 p-4 text-sm text-white">
						This awesome project was made by{" "}
						<a
							href="https://twitter.com/posandu"
							target="_blank"
							rel="noopener noreferrer"
							className="text-purple-400"
						>
							@posandu
						</a>{" "}
						who is a young dev. Please consider buying me a coffee to keep this
						running up :)
					</p>
					<div
						dangerouslySetInnerHTML={{
							__html: `<a href="https://www.buymeacoffee.com/posandu" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: calc(60px / 1.5) !important;width: calc(217px / 1.5) !important;" ></a>`,
						}}
					></div>

					<h1 className="mt-8 text-2xl font-bold text-white">
						Community Gradients
					</h1>

					<button
						className="mt-2 text-sm text-white"
						onClick={() => {
							setUpdate(update + 1);
							setLoading(true);
						}}
					>
						Refresh
					</button>

					<div
						className={
							"mt-8 grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4" +
							(loading ? " pointer-events-none opacity-75" : "")
						}
					>
						{generations.map((generation) => (
							<Gradient
								prompt={generation.prompt}
								code={generation.code}
								key={generation.id}
							/>
						))}
					</div>
				</div>

				<div className="p-10"></div>
			</div>
		</>
	);
};

export default Home;
